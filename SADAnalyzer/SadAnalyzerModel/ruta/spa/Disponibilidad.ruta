TYPESYSTEM typesystems.ECoreTypeDescriptor;
DECLARE Token_Alta,Token_Disponibilidad,Token_Baja,Token_Falla,Token_Detectar,Token_Prevenir,Token_Tolerar,Token_Capacidad,Token_Recuperar;



Token{Token.stem == "alta", REGEXP(Token.pos, "AQ")-> MARK(Token_Alta)};
Token{Token.lemma == "disponibilidad", REGEXP(Token.pos, "N(.?)")-> MARK(Token_Disponibilidad)};
Token{Token.lemma == "baja", REGEXP(Token.pos, "AQ")-> MARK(Token_Baja)};
Token{Token.stem == "fall", REGEXP(Token.pos, "N(.?)")-> MARK(Token_Falla)};
Token{Token.lemma == "detectar", REGEXP(Token.pos, "V(..?)")-> MARK(Token_Detectar)};
Token{Token.lemma == "prevenir", REGEXP(Token.pos, "V(..?)")-> MARK(Token_Prevenir)};
Token{Token.lemma == "tolerar", REGEXP(Token.pos, "V(..?)")-> MARK(Token_Tolerar)};
Token{Token.stem == "recuper", REGEXP(Token.pos, "V(..?)")-> MARK(Token_Recuperar)};
Token{Token.lemma == "capacidad", REGEXP(Token.pos, "N(.?)"),NEAR(Token_Detectar,0,12)-> MARK(Token_Capacidad)};
Token{Token.lemma == "capacidad", REGEXP(Token.pos, "N(.?)"),NEAR(Token_Prevenir,0,12)-> MARK(Token_Capacidad)};
Token{Token.lemma == "capacidad", REGEXP(Token.pos, "N(.?)"),NEAR(Token_Tolerar,0,12)-> MARK(Token_Capacidad)};
Token{Token.lemma == "capacidad", REGEXP(Token.pos, "N(.?)"),NEAR(Token_Recuperar,0,12)-> MARK(Token_Capacidad)};


 Sentence{ -> CREATE(CrosscuttingConcern, "name" = "Disponibilidad","sentence"=Sentence)} <- {
    Token_Disponibilidad;
    Token_Alta Token_Disponibilidad;
    Token_Baja{NEAR(Token_Disponibilidad,0,7)};
    Token_Capacidad{NEAR(Token_Falla,0,20)};
};