
Token{Token.lemma == "replicacion", REGEXP(Token.pos, "N(.?)")-> MARK(Escalabilidad_Horizontal.Token_Replicacion)};
Token{Token.lemma == "replicaciÑn", REGEXP(Token.pos, "N(.?)")-> MARK(Escalabilidad_Horizontal.Token_Replicacion)};
Token{Token.lemma == "replicar", REGEXP(Token.pos, "V(..?)")-> MARK(Escalabilidad_Horizontal.Token_Replicar)};
Token{Token.lemma == "hardware", REGEXP(Token.pos, "N(.?)")-> MARK(Escalabilidad_Horizontal.Token_Hardware)};
Token{Token.lemma == "agregar", REGEXP(Token.pos, "V(..?)")-> MARK(Escalabilidad_Horizontal.Token_Agregar)};
Token{Token.lemma == "nuevo", REGEXP(Token.pos, "AQ")-> MARK(Escalabilidad_Horizontal.Token_Nuevo)};
Token{Token.lemma == "servidor", REGEXP(Token.pos, "N(.?)")-> MARK(Escalabilidad_Horizontal.Token_Servidor)};

Sentence{ -> CREATE(CrosscuttingConcern, "name" = "Escalabilidad_Horizontal", "kind" = "Tactics/Strategy", "sentence"=Sentence)} <- {

(Escalabilidad_Horizontal.Token_Agregar{NEAR(Escalabilidad_Horizontal.Token_Nuevo,0,7)}){NEAR(Escalabilidad_Horizontal.Token_Replicacion,0,10)};

Escalabilidad_Horizontal.Token_Replicacion{NEAR(Escalabilidad_Horizontal.Token_Hardware,0,10)};
Escalabilidad_Horizontal.Token_Replicar{NEAR(Escalabilidad_Horizontal.Token_Hardware,0,10)};



};