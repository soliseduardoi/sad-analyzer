TYPESYSTEM typesystems.ECoreTypeDescriptor;
DECLARE EscalabilidadVertical.Token_Incorporar,EscalabilidadVertical.Token_Cliente,EscalabilidadVertical.Token_Recurso,EscalabilidadVertical.Token_Procesar,EscalabilidadVertical.Token_Servidor;


Token{Token.lemma == "incorporar", REGEXP(Token.pos, "V(..?)")-> MARK(EscalabilidadVertical.Token_Incorporar)};
Token{Token.lemma == "agregar", REGEXP(Token.pos, "V(..?)")-> MARK(EscalabilidadVertical.Token_Incorporar)};
Token{Token.stem == "client", REGEXP(Token.pos, "N(.?)")-> MARK(EscalabilidadVertical.Token_Cliente)};
Token{Token.stem == "servidor", REGEXP(Token.pos, "N(.?)")-> MARK(EscalabilidadVertical.Token_Servidor)};
Token{Token.stem == "recurs", REGEXP(Token.pos, "N(.?)")-> MARK(EscalabilidadVertical.Token_Recurso)};
Token{Token.lemma == "procesar", REGEXP(Token.pos, "V(..?)")-> MARK(EscalabilidadVertical.Token_Procesar)};


 Sentence{ -> CREATE(CrosscuttingConcern, "name" = "Escalabilidad Vertical","sentence"=Sentence)} <- {
    EscalabilidadVertical.Token_Incorporar{NEAR(EscalabilidadVertical.Token_Cliente,0,7)};
    EscalabilidadVertical.Token_Incorporar{NEAR(EscalabilidadVertical.Token_Servidor,0,7)};
    (EscalabilidadVertical.Token_Incorporar{NEAR(EscalabilidadVertical.Token_Recurso,0,7)}){NEAR(EscalabilidadVertical.Token_Procesar,0,30)};
};
