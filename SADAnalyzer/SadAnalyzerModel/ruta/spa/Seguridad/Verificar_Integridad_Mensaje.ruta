TYPESYSTEM typesystems.ECoreTypeDescriptor;
DECLARE Token_Checksum,Token_Deteccion,Token_Error,Token_Chequear,Token_Agregar,Token_Informacion,Token_Corrupto,Token_Dato,Token_Suma,Token_Verificacion,Token_De;


Token{Token.stem == "checksum", REGEXP(Token.pos, "N(.?)")-> MARK(Verificar_Integridad_Mensaje.Token_Checksum)};
Token{Token.stem == "deteccion", REGEXP(Token.pos, "N(.?)")-> MARK(Verificar_Integridad_Mensaje.Token_Deteccion)};
Token{Token.stem == "error", REGEXP(Token.pos, "N(.?)")-> MARK(Verificar_Integridad_Mensaje.Token_Error)};
Token{Token.stem == "cheque"-> MARK(Verificar_Integridad_Mensaje.Token_Chequear)};
Token{Token.stem == "inform", REGEXP(Token.pos, "N(.?)")-> MARK(Verificar_Integridad_Mensaje.Token_Informacion)};
Token{Token.stem == "informacion", REGEXP(Token.pos, "N(.?)")-> MARK(Verificar_Integridad_Mensaje.Token_Informacion)};
Token{Token.stem == "agreg", REGEXP(Token.pos, "V(..?)")-> MARK(Verificar_Integridad_Mensaje.Token_Agregar)};
Token{Token.stem == "corrupt", REGEXP(Token.pos, "N(.?)")-> MARK(Verificar_Integridad_Mensaje.Token_Corrupto)};
Token{Token.stem == "dat", REGEXP(Token.pos, "N(.?)")-> MARK(Verificar_Integridad_Mensaje.Token_Dato)};
Token{Token.stem == "sum", REGEXP(Token.pos, "N(.?)")-> MARK(Verificar_Integridad_Mensaje.Token_Suma)};
Token{Token.lemma == "verificación", REGEXP(Token.pos, "N(.?)")-> MARK(Verificar_Integridad_Mensaje.Token_Verificacion)};
Token{Token.lemma == "de", REGEXP(Token.pos, "SP")-> MARK(Verificar_Integridad_Mensaje.Token_De)};

 Sentence{ -> CREATE(CrosscuttingConcern, "name" = "Verificar Integridad del Mensaje","sentence"=Sentence)} <- {
    Verificar_Integridad_Mensaje.Token_Checksum;
    Verificar_Integridad_Mensaje.Token_Deteccion Verificar_Integridad_Mensaje.Token_De Verificar_Integridad_Mensaje.Token_Error;
    Verificar_Integridad_Mensaje.Token_Chequear Verificar_Integridad_Mensaje.Token_De Verificar_Integridad_Mensaje.Token_Error;
    Verificar_Integridad_Mensaje.Token_Dato{NEAR(Verificar_Integridad_Mensaje.Token_Corrupto,0,10)};
    (Verificar_Integridad_Mensaje.Token_Suma{NEAR(Verificar_Integridad_Mensaje.Token_Verificacion,0,7)}){NEAR(Verificar_Integridad_Mensaje.Token_Dato,0,15)};
    
};
