

Token{Token.stem == "control", REGEXP(Token.pos, "N(.?)")-> MARK(Identificar_Actores.Token_Control)};
Token{Token.lemma == "de", REGEXP(Token.pos, "SP")-> MARK(Identificar_Actores.Token_De)};
Token{Token.stem == "sesion", REGEXP(Token.pos, "N(.?)")-> MARK(Identificar_Actores.Token_Sesion)};
Token{Token.stem == "Sesion", REGEXP(Token.pos, "N(.?)")-> MARK(Identificar_Actores.Token_Sesion)};
Token{Token.stem == "encarg", REGEXP(Token.pos, "AQ")-> MARK(Identificar_Actores.Token_Encargado)};
Token{Token.stem == "identif", REGEXP(Token.pos, "N(.?)")-> MARK(Identificar_Actores.Token_Identificacion)};
Token{Token.stem == "administr", REGEXP(Token.pos, "N(.?)")-> MARK(Identificar_Actores.Token_Administrador)};
Token{Token.stem == "inici", REGEXP(Token.pos, "N(.?)")-> MARK(Identificar_Actores.Token_Inicio)};

 Sentence{ -> CREATE(CrosscuttingConcern, "name" = "Identificar Actores","sentence"=Sentence)} <- {
    Identificar_Actores.Token_Control Identificar_Actores.Token_De Identificar_Actores.Token_Sesion;
    (Identificar_Actores.Token_Encargado{NEAR(Identificar_Actores.Token_Control,0,7)}){NEAR(Identificar_Actores.Token_Identificacion,0,15)};
    Identificar_Actores.Token_Administrador{NEAR(Identificar_Actores.Token_Sesion,0,7)};
    Identificar_Actores.Token_Inicio{NEAR(Token_Sesion,0,7)};
};