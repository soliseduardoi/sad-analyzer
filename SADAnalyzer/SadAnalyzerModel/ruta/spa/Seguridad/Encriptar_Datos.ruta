
Token{Token.stem == "encript", REGEXP(Token.pos, "V(..?)")-> MARK(Encriptar_Datos.Token_Encriptar)};
Token{Token.stem == "encript", REGEXP(Token.pos, "N(.?)")-> MARK(Encriptar_Datos.Token_Encriptar)};
Token{Token.stem == "encript", REGEXP(Token.pos, "SP")-> MARK(Encriptar_Datos.Token_Encriptar)};
Token{Token.stem == "encript", REGEXP(Token.pos, "AQ")-> MARK(Encriptar_Datos.Token_Encriptar)};
Token{Token.stem == "dat", REGEXP(Token.pos, "N(.?)")-> MARK(Encriptar_Datos.Token_Dato)};
Token{Token.stem == "desencript", REGEXP(Token.pos, "V(..?)")-> MARK(Encriptar_Datos.Token_Desencriptar)};
Token{Token.lemma == "codificar/decodificar", REGEXP(Token.pos, "V(..?)")-> MARK(Encriptar_Datos.Token_Cod_Dec)};
Token{Token.stem == "algoritm", REGEXP(Token.pos, "N(.?)")-> MARK(Encriptar_Datos.Token_Algoritmo)};
Token{Token.stem == "inform", REGEXP(Token.pos, "N(.?)")-> MARK(Encriptar_Datos.Token_Informacion)};
Token{Token.stem == "informacion", REGEXP(Token.pos, "N(.?)")-> MARK(Encriptar_Datos.Token_Informacion)};
Token{Token.stem == "envi", REGEXP(Token.pos, "N(.?)")-> MARK(Encriptar_Datos.Token_Envio)};
Token{Token.lemma == "encargado", REGEXP(Token.pos, "AQ")-> MARK(Encriptar_Datos.Token_Encargado)};
Token{Token.stem == "tar", REGEXP(Token.pos, "N(.?)")-> MARK(Encriptar_Datos.Token_Tarea)};
Token{Token.stem == "comun", REGEXP(Token.pos, "N(.?)")-> MARK(Token_Comunicacion)};

 Sentence{ -> CREATE(CrosscuttingConcern, "name" = "Encriptar Datos","sentence"=Sentence)} <- {
    Encriptar_Datos.Token_Encriptar{NEAR(Encriptar_Datos.Token_Dato,0,7)};
    Encriptar_Datos.Token_Desencriptar{NEAR(Encriptar_Datos.Token_Dato,0,7)};
    Encriptar_Datos.Token_Cod_Dec{NEAR(Encriptar_Datos.Token_Dato,0,7)};
    Encriptar_Datos.Token_Algoritmo{NEAR(Encriptar_Datos.Token_Encriptar,0,7)};
    (Encriptar_Datos.Token_Envio{NEAR(Encriptar_Datos.Token_Informacion,0,7)}){NEAR(Encriptar_Datos.Token_Encriptar,0,15)};
    ((Encriptar_Datos.Token_Encargado{NEAR(Encriptar_Datos.Token_Tarea,0,15)}){NEAR(Encriptar_Datos.Token_Comunicacion,0,15)}){NEAR(Encriptar_Datos.Token_Encriptar,0,30)};
    (Encriptar_Datos.Token_Encargado{NEAR(Encriptar_Datos.Token_Tarea,0,7)}){NEAR(Encriptar_Datos.Token_Encriptar,0,30)};
};