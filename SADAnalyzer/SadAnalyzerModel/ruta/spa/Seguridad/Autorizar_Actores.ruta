
Token{Token.lemma == "permite", REGEXP(Token.pos, "N(.?)")-> MARK(Autorizar_Actores.Token_Permite)};
Token{Token.stem == "acced", REGEXP(Token.pos, "V(..?)")-> MARK(Autorizar_Actores.Token_Acceder)};
Token{Token.stem == "funcional", REGEXP(Token.pos, "N(.?)")-> MARK(Autorizar_Actores.Token_Funcionalidad)};
Token{Token.stem == "administr", REGEXP(Token.pos, "N(.?)")-> MARK(Autorizar_Actores.Token_Administrador)};
Token{Token.stem == "usuari", REGEXP(Token.pos, "N(.?)")-> MARK(Autorizar_Actores.Token_Usuario)};

 Sentence{ -> CREATE(CrosscuttingConcern, "name" = "Autorizar Actores","sentence"=Sentence)} <- {
    Autorizar_Actores.Token_Usuario Autorizar_Actores.Token_Administrador;
    (Autorizar_Actores.Token_Permite{NEAR(Autorizar_Actores.Token_Acceder,0,7)}){NEAR(Autorizar_Actores.Token_Funcionalidad,0,15)};
};